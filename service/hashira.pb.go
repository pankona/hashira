// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hashira.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	hashira.proto

It has these top-level messages:
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import service2 "."
import service3 "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hashira service

type HashiraClient interface {
	Create(ctx context.Context, in *service2.CommandCreate, opts ...grpc.CallOption) (*service3.ResultCreate, error)
	Update(ctx context.Context, in *service2.CommandUpdate, opts ...grpc.CallOption) (*service3.ResultUpdate, error)
	Delete(ctx context.Context, in *service2.CommandDelete, opts ...grpc.CallOption) (*service3.ResultDelete, error)
	Retrieve(ctx context.Context, in *service2.CommandRetrieve, opts ...grpc.CallOption) (*service3.ResultRetrieve, error)
}

type hashiraClient struct {
	cc *grpc.ClientConn
}

func NewHashiraClient(cc *grpc.ClientConn) HashiraClient {
	return &hashiraClient{cc}
}

func (c *hashiraClient) Create(ctx context.Context, in *service2.CommandCreate, opts ...grpc.CallOption) (*service3.ResultCreate, error) {
	out := new(service3.ResultCreate)
	err := grpc.Invoke(ctx, "/service.Hashira/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashiraClient) Update(ctx context.Context, in *service2.CommandUpdate, opts ...grpc.CallOption) (*service3.ResultUpdate, error) {
	out := new(service3.ResultUpdate)
	err := grpc.Invoke(ctx, "/service.Hashira/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashiraClient) Delete(ctx context.Context, in *service2.CommandDelete, opts ...grpc.CallOption) (*service3.ResultDelete, error) {
	out := new(service3.ResultDelete)
	err := grpc.Invoke(ctx, "/service.Hashira/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashiraClient) Retrieve(ctx context.Context, in *service2.CommandRetrieve, opts ...grpc.CallOption) (*service3.ResultRetrieve, error) {
	out := new(service3.ResultRetrieve)
	err := grpc.Invoke(ctx, "/service.Hashira/Retrieve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hashira service

type HashiraServer interface {
	Create(context.Context, *service2.CommandCreate) (*service3.ResultCreate, error)
	Update(context.Context, *service2.CommandUpdate) (*service3.ResultUpdate, error)
	Delete(context.Context, *service2.CommandDelete) (*service3.ResultDelete, error)
	Retrieve(context.Context, *service2.CommandRetrieve) (*service3.ResultRetrieve, error)
}

func RegisterHashiraServer(s *grpc.Server, srv HashiraServer) {
	s.RegisterService(&_Hashira_serviceDesc, srv)
}

func _Hashira_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(service2.CommandCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashiraServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Hashira/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashiraServer).Create(ctx, req.(*service2.CommandCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hashira_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(service2.CommandUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashiraServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Hashira/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashiraServer).Update(ctx, req.(*service2.CommandUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hashira_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(service2.CommandDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashiraServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Hashira/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashiraServer).Delete(ctx, req.(*service2.CommandDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hashira_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(service2.CommandRetrieve)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashiraServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Hashira/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashiraServer).Retrieve(ctx, req.(*service2.CommandRetrieve))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hashira_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Hashira",
	HandlerType: (*HashiraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Hashira_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Hashira_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Hashira_Delete_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Hashira_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hashira.proto",
}

func init() { proto.RegisterFile("hashira.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x48, 0x2c, 0xce,
	0xc8, 0x2c, 0x4a, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb,
	0x4c, 0x4e, 0x95, 0xe2, 0x4d, 0xce, 0xcf, 0xcd, 0x4d, 0xcc, 0x4b, 0x81, 0x88, 0x4b, 0xf1, 0x14,
	0xa5, 0x16, 0x97, 0xe6, 0x94, 0x40, 0x78, 0x46, 0xbf, 0x19, 0xb9, 0xd8, 0x3d, 0x20, 0xfa, 0x84,
	0x2c, 0xb9, 0xd8, 0x9c, 0x8b, 0x52, 0x13, 0x4b, 0x52, 0x85, 0xc4, 0xf4, 0xa0, 0x9a, 0xf5, 0x9c,
	0x21, 0x7a, 0x21, 0xe2, 0x52, 0xa2, 0x70, 0xf1, 0x20, 0xb0, 0x21, 0x10, 0x61, 0x25, 0x06, 0x90,
	0xd6, 0xd0, 0x82, 0x14, 0xac, 0x5a, 0x21, 0xe2, 0x18, 0x5a, 0x21, 0xc2, 0x10, 0xad, 0x2e, 0xa9,
	0x39, 0xa9, 0xd8, 0xb4, 0x42, 0xc4, 0x31, 0xb4, 0x42, 0x84, 0x95, 0x18, 0x84, 0xec, 0xb9, 0x38,
	0x82, 0x52, 0x4b, 0x8a, 0x32, 0x53, 0xcb, 0x52, 0x85, 0x24, 0xd0, 0x35, 0xc3, 0x64, 0xa4, 0xc4,
	0xd1, 0xb4, 0xc3, 0x24, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0x81, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xfb, 0x38, 0x87, 0x06, 0x3b, 0x01, 0x00, 0x00,
}
